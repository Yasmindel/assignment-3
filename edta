def edit_distance_helper(s, t):
    m, n = len(s), len(t)
    C = [[0] * (n + 1) for _ in range(m + 1)]

    for i in range(m + 1):
        C[i][0] = i
    for j in range(n + 1):
        C[0][j] = j

    for i in range(1, m + 1):
        for j in range(1, n + 1):
            cost = 0 if s[i - 1] == t[j - 1] else 1
            C[i][j] = min(C[i - 1][j] + 1,  # Deletion
                          C[i][j - 1] + 1,  # Insertion
                          C[i - 1][j - 1] + cost)  # Substitution
    return C

def edit_distance(C, s, t):
    return C[len(s)][len(t)]

def edit_distance_backtrack(C, s, t):
    i, j = len(s), len(t)
    aligned_s, aligned_t = [], []

    while i > 0 or j > 0:
        if i > 0 and j > 0 and C[i][j] == C[i - 1][j - 1] + (0 if s[i - 1] == t[j - 1] else 1):
            aligned_s.append(s[i - 1])
            aligned_t.append(t[j - 1])
            i -= 1
            j -= 1
        elif i > 0 and C[i][j] == C[i - 1][j] + 1:
            aligned_s.append(s[i - 1])
            aligned_t.append('-')
            i -= 1
        else:
            aligned_s.append('-')
            aligned_t.append(t[j - 1])
            j -= 1

    return ''.join(reversed(aligned_s)), ''.join(reversed(aligned_t))

def edta():
    # Define the dataset directly
    recs = [("Rosalind_43", "PRETTY"), ("Rosalind_97", "PRTTEIN")]
    seqa, seqb = recs[0][1], recs[1][1]

    # Compute the edit distance matrix
    C = edit_distance_helper(seqa, seqb)

    # Output the edit distance
    print(edit_distance(C, seqa, seqb))

    # Output the aligned sequences
    aligned_seqs = edit_distance_backtrack(C, seqa, seqb)
    print('\n'.join(aligned_seqs))

if __name__ == "__main__":
    edta()

