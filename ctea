import sys

lookup = {}  # Memoization dictionary

def num_optimal_alignments(C, s, t, i, j):
    if i == 0 or j == 0:
        return 1
    if (i, j) not in lookup:
        total_ways = 0
        if C[i][j] == C[i-1][j] + 1:
            total_ways += num_optimal_alignments(C, s, t, i-1, j)
        if C[i][j] == C[i][j-1] + 1:
            total_ways += num_optimal_alignments(C, s, t, i, j-1)
        if C[i][j] == C[i-1][j-1] and s[i-1] == t[j-1]:
            total_ways += num_optimal_alignments(C, s, t, i-1, j-1)
        if C[i][j] == C[i-1][j-1] + 1 and s[i-1] != t[j-1]:
            total_ways += num_optimal_alignments(C, s, t, i-1, j-1)

        lookup[(i, j)] = total_ways % (2**27 - 1)

    return lookup[(i, j)]

def read_fasta(filepath):
    sequences = []
    with open(filepath, 'r') as f:
        content = f.read().strip().split('>')
        for entry in content:
            if entry:
                lines = entry.split('\n')
                label = lines[0]
                seq = ''.join(lines[1:])
                sequences.append((label, seq))
    return sequences

def edit_distance_helper(s, t):
    m, n = len(s), len(t)
    C = [[0] * (n + 1) for _ in range(m + 1)]

    for i in range(m + 1):
        C[i][0] = i
    for j in range(n + 1):
        C[0][j] = j

    for i in range(1, m + 1):
        for j in range(1, n + 1):
            cost = 0 if s[i - 1] == t[j - 1] else 1
            C[i][j] = min(C[i - 1][j] + 1,  # Deletion
                          C[i][j - 1] + 1,  # Insertion
                          C[i - 1][j - 1] + cost)  # Substitution
    return C

def ctea():
    # Dataset
    recs = [("Rosalind_78", "PLEASANTLY"), ("Rosalind_33", "MEANLY")]
    seqa, seqb = recs[0][1], recs[1][1]

    # Compute the edit distance matrix
    C = edit_distance_helper(seqa, seqb)

    # Calculate the number of optimal alignments
    result = num_optimal_alignments(C, seqa, seqb, len(seqa), len(seqb))
    print(result)

if __name__ == "__main__":
    ctea()
